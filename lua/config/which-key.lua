local wk = require("which-key")
wk.setup {
  plugins = {
    marks = false,
    registers = false,
    spelling = {enabled = false, suggestions = 20},
    presets = {operators = false, motions = false, text_objects = false, windows = false, nav = false, z = false, g = false}
  }
}

local mappings = {
  { "<leader>b", group = "Bookmarks" },
  { "<leader>bj", "<cmd>BookmarkNext<CR>", desc = "Go to Next Bookmark" },
  { "<leader>bk", "<cmd>BookmarkPrev<CR>", desc = "Go to Previous Bookmark" },
  { "<leader>c", group = "NERDCommenter" },
  { "<leader>d", "<cmd>:Oil<CR>", desc = "Oil" },
  { "<leader>g", group = "Fugitive Git" },
  { "<leader>gf", "<cmd>diffget //2<cr>", desc = "Git HEAD" },
  { "<leader>gj", "<cmd>diffget //3<cr>", desc = "Git master" },
  { "<leader>gs", "<cmd>G<CR>", desc = "Git Status" },
  { "<leader>j", group = "Jumps" },
  { "<leader>ji", "<C-i>", desc = "Jump to Next Position" },
  { "<leader>jo", "<C-o>", desc = "Jump to Previous Position" },
  { "<leader>k", group = "Keyboard Settings" },
  { "<leader>kc", "<cmd>lua change_kbd()<CR>", desc = "Toggle Caps Lock to ESC <-> Ctrl" },
  { "<leader>l", group = "LSP" },
  { "<leader>lD", "<cmd>lua vim.lsp.buf.declaration()<cr>", desc = "Go To Declaration" },
  { "<leader>lK", "<cmd>lua vim.lsp.buf.hover()<CR>", desc = "Hover Command" },
  { "<leader>lN", "<cmd>lua vim.diagnostic.goto_next()<CR>", desc = "Go To Previous Diagnostic" },
  { "<leader>lR", "<cmd>lua vim.lsp.buf.rename()<CR>", desc = "Rename" },
  { "<leader>lW", "<cmd>lua vim.lsp.buf.remove_workspace_folder()<cr>", desc = "Remove Workspace Folder" },
  { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<CR>", desc = "Code Action" },
  { "<leader>lc", ":LspInfo<cr>", desc = "Connected Language Servers" },
  { "<leader>ld", "<cmd>lua vim.lsp.buf.definition()<cr>", desc = "Go To Definition" },
  { "<leader>le", "<cmd>lua vim.diagnostic.show_line_diagnostics()<CR>", desc = "Show Line Diagnostics" },
  { "<leader>lf", "<cmd>lua vim.lsp.buf.formatting()<CR>", desc = "Formatting" },
  { "<leader>lic", ":LspInfo<cr>", desc = "Connected Language Servers" },
  { "<leader>lim", "<cmd>lua vim.lsp.buf.implementation()<CR>", desc = "Implementation" },
  { "<leader>lk", "<cmd>lua vim.lsp.buf.signature_help()<cr>", desc = "Signature Help" },
  { "<leader>ll", "<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<cr>", desc = "List Workspace Folders" },
  { "<leader>ln", "<cmd>lua vim.diagnostic.goto_prev()<CR>", desc = "Go To Next Diagnostic" },
  { "<leader>lq", "<cmd>lua vim.diagnostic.setloclist()<CR>", desc = "Diagnostic Set LocList" },
  { "<leader>lr", "<cmd>lua vim.lsp.buf.references()<cr>", desc = "References" },
  { "<leader>lt", "<cmd>lua vim.lsp.buf.type_definition()<cr>", desc = "Type Definition" },
  { "<leader>lw", "<cmd>lua vim.lsp.buf.add_workspace_folder()<cr>", desc = "Add Workspace Folder" },
  { "<leader>m", "<cmd>:Make<CR>", desc = "Async :Make" },
  { "<leader>n", group = "NvimTree" },
  { "<leader>nt", "<cmd>:NvimTreeToggle<CR>", desc = "Toggle" },
  { "<leader>o", group = "Org Mode" },
  { "<leader>p", "<cmd>:Lazy<CR>", desc = "Plugins" },
  { "<leader>r", group = "Overseer" },
  { "<leader>rr", "<cmd>OverseerRun<CR>", desc = "Run" },
  { "<leader>rt", "<cmd>OverseerToggle<CR>", desc = "Toggle" },
  { "<leader>s", group = "Source Configs" },
  { "<leader>sc", "<cmd>source $HOME/.config/nvim/init.lua<CR><cmd>echon 'Config sourced'<CR>", desc = "Source nvim Config" },
  { "<leader>su", "<cmd>call UltiSnips#RefreshSnippets()<CR><cmd>echon 'Snippets refreshed'<CR>", desc = "Source UltinSnippets Config" },
  { "<leader>t", group = "Telescope" },
  { "<leader>tb", "<cmd>Telescope buffers <CR>", desc = "Buffers" },
  { "<leader>tf", group = "Files Utility" },
  { "<leader>tfb", "<cmd>Telescope file_browser prompt_prefix=üîç<CR>", desc = "File Browser" },
  { "<leader>tff", "<cmd>Telescope find_files prompt_prefix=üîç<CR>", desc = "Find Files" },
  { "<leader>tg", "<cmd>Telescope live_grep<CR>", desc = "Live Grep" },
  { "<leader>th", "<cmd>Telescope help_tags<CR>", desc = "Help Tags" },
  { "<leader>tt", "<cmd>Telescope telescope-tabs list_tabs<CR>", desc = "Tabs" },
  { "<leader>tu", "<cmd>Telescope ultisnips<CR>", desc = "UltinSnippets" },
  { "<leader>v", group = "VimTex" },
  { "<leader>vp", "<cmd>lua ParentFile()<CR><CR>", desc = "Go to Parent File" },
  { "<leader>w", group = "Windows" },
  { "<leader>wh", "<C-w><C-h>", desc = "Move to the window on the left" },
  { "<leader>wi", "<cmd>exe 'resize +5' <CR>", desc = "Resize horizontal line +5" },
  { "<leader>wj", "<C-w><C-j>", desc = "Move to the window on the left" },
  { "<leader>wk", "<C-w><C-k>", desc = "Move to the window above" },
  { "<leader>wl", "<C-w><C-l>", desc = "Move to the window below" },
  { "<leader>wo", "<cmd>exe 'vertical resize -5'<CR>", desc = "Resize vertical line -5" },
  { "<leader>wu", "<cmd>exe 'resize -5' <CR>", desc = "Resize horizontal line -5" },
  { "<leader>wy", "<cmd>exe 'vertical resize +5'<CR>", desc = "Resize vertical line +5" },
}

local opts = {prefix = '<leader>'}
wk.add(mappings, opts)
